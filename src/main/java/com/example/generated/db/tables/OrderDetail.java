/*
 * This file is generated by jOOQ.
 */
package com.example.generated.db.tables;


import com.example.generated.db.Florist;
import com.example.generated.db.Keys;
import com.example.generated.db.tables.records.OrderDetailRecord;

import java.time.LocalDate;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrderDetail extends TableImpl<OrderDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>florist.order_detail</code>
     */
    public static final OrderDetail ORDER_DETAIL = new OrderDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderDetailRecord> getRecordType() {
        return OrderDetailRecord.class;
    }

    /**
     * The column <code>florist.order_detail.id</code>.
     */
    public final TableField<OrderDetailRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>florist.order_detail.customer_id</code>.
     */
    public final TableField<OrderDetailRecord, String> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>florist.order_detail.delivery_date</code>.
     */
    public final TableField<OrderDetailRecord, LocalDate> DELIVERY_DATE = createField(DSL.name("delivery_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>florist.order_detail.delivery_address</code>.
     */
    public final TableField<OrderDetailRecord, String> DELIVERY_ADDRESS = createField(DSL.name("delivery_address"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>florist.order_detail.recipient_name</code>.
     */
    public final TableField<OrderDetailRecord, String> RECIPIENT_NAME = createField(DSL.name("recipient_name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>florist.order_detail.bouquet_code</code>.
     */
    public final TableField<OrderDetailRecord, Integer> BOUQUET_CODE = createField(DSL.name("bouquet_code"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>florist.order_detail.delivery_message</code>.
     */
    public final TableField<OrderDetailRecord, String> DELIVERY_MESSAGE = createField(DSL.name("delivery_message"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>florist.order_detail.recipient_phone_number</code>.
     */
    public final TableField<OrderDetailRecord, String> RECIPIENT_PHONE_NUMBER = createField(DSL.name("recipient_phone_number"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private OrderDetail(Name alias, Table<OrderDetailRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrderDetail(Name alias, Table<OrderDetailRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>florist.order_detail</code> table reference
     */
    public OrderDetail(String alias) {
        this(DSL.name(alias), ORDER_DETAIL);
    }

    /**
     * Create an aliased <code>florist.order_detail</code> table reference
     */
    public OrderDetail(Name alias) {
        this(alias, ORDER_DETAIL);
    }

    /**
     * Create a <code>florist.order_detail</code> table reference
     */
    public OrderDetail() {
        this(DSL.name("order_detail"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Florist.FLORIST;
    }

    @Override
    public Identity<OrderDetailRecord, Integer> getIdentity() {
        return (Identity<OrderDetailRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderDetailRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_DETAIL_PRIMARY;
    }

    @Override
    public OrderDetail as(String alias) {
        return new OrderDetail(DSL.name(alias), this);
    }

    @Override
    public OrderDetail as(Name alias) {
        return new OrderDetail(alias, this);
    }

    @Override
    public OrderDetail as(Table<?> alias) {
        return new OrderDetail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderDetail rename(String name) {
        return new OrderDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderDetail rename(Name name) {
        return new OrderDetail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderDetail rename(Table<?> name) {
        return new OrderDetail(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderDetail where(Condition condition) {
        return new OrderDetail(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderDetail where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderDetail where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderDetail where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderDetail where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderDetail where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderDetail where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderDetail where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderDetail whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderDetail whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
